#!/usr/bin/perl
use strict;
use warnings;
use Template;
use IPC::Run qw(run);

# some useful options (see below for full list)
my $config = {
#    INCLUDE_PATH => '/search/path',  # or list ref
#	INTERPOLATE  => 1,               # expand "$var" in plain text
	POST_CHOMP   => 1,               # cleanup whitespace
#	PRE_PROCESS  => 'header',        # prefix each template
	EVAL_PERL    => 1,               # evaluate Perl code blocks
};

my $outpath = '../snowballstem.github.io/';

$ENV{PYTHONPATH} = 'pygments-snowball';
$ENV{PYTHONIOENCODING} = 'UTF-8';

my $code_path_prefix = 'code/';
my $code_path_suffix = '.sbl';
#my $code_path_prefix = '../snowball/algorithms/';
#my $code_path_suffix = '/stem_Unicode.sbl';

# Stuff that just gets copied over.
foreach my $f (qw(
    CNAME
    favicon.ico
    robots.txt
    snub-dodecahedron.gif
    styles.css
    codesets
    algorithms
    otherapps
    texts
    runtime
    compiler
)) {
    system("rm", "-rf", $outpath.$f) == 0 or die "Failed to delete '$outpath$f'\n";
    system("cp", "-a", $f, $outpath.$f) == 0 or die "Failed to copy '$f'\n";

    # Currently needed for .tt files in algorithms - can be removed once we
    # generate everything there.
    system('find', $outpath, '-name', '*.tt', '-delete') == 0 or die "Failed to remove .tt files from generated website\n";
}

my $template = Template->new($config);

1;
# define template variables for replacement
my $vars = {};

$$vars{highlight} = sub {
    my $in = shift;
    my $lang = shift;
    # Remove leading and trailing whitespace-only lines.
    $in =~ s/\A\s*\n//;
    $in =~ s/\n\s+\z/\n/;
    $in =~ /\&[#\w]+;/ and warn "HTML entity in Snowball code? [$&]";
    my $out;
    if (defined $lang) {
	run ['pygmentize', "-l$lang", '-fhtml'], \$in, \$out, \*STDERR
	    or die "python: $?";
    } else {
	run ['python', 'highlight_snowball.py'], \$in, \$out, \*STDERR
	    or die "python: $?";
    }
    return $out;
};

$$vars{highlight_inline} = sub {
    my $in = shift;
    # Remove leading and trailing whitespace-only lines.
    $in =~ s/\A\s*\n//;
    $in =~ s/\n\s+\z/\n/;
    $in =~ /\&[#\w]+;/ and warn "HTML entity in Snowball code? [$&]";
    $in =~ /\n/ and warn "Newline in inline Snowball code? [$in]";
    my $out;
    run ['python', 'highlight_snowball.py'], \$in, \$out, \*STDERR
	or die "python: $?";
    $out =~ s!<div([^.]*)><pre>!<span$1><code>!;
    $out =~ s!</pre></div>!</code></span>!;
    return $out;
};

$$vars{highlight_file} = sub {
    my $file = shift;
    if ($file =~ /\.\w+$/) {
	return scalar(`pygmentize -fhtml \Qcode/$file\E`);
    }
    return scalar(`python highlight_snowball.py < \Q$code_path_prefix$file$code_path_suffix\E`);
};

# The footer of the page.
# There should be no output after this.
$$vars{footer} = <<'__END__';
        </div><!-- /.col-md-10 -->
      </div><!-- /.row -->
    </div><!-- /.container -->

    <div class="container">
      <footer class="footer">
        <p>
          <a href="lists.html">Write to our mailing list</a> if you have comments or questions about the project.
        </p>
      </footer>
    </div> <!-- /container -->
    <script src="https://cdn.jsdelivr.net/jquery/1.11.3/jquery.min.js"></script>
    <script src="https://cdn.jsdelivr.net/bootstrap/3.3.5/js/bootstrap.min.js"></script>
  </body>
</html>
__END__

my @menu = (
    [ "index" => "Introduction" ],
    [ "demo" => "Demo" ],
    [ "algorithms" => "Algorithms" ],
    [ "download" => "Download" ],
    [ "lists" => "Mailing Lists" ],
    [ "license" => "License" ],
    [ "credits" => "Credits" ],
    [ "projects" => "Projects" ]
);

# specify input filename, or file handle, text reference, etc.
for my $in (<*.tt */*.tt */*/*.tt>) {
    ((my $page = $in) =~ s/\.tt$//) or next;
    my $out = "$outpath$page.html";
    my $pretty_name = "\u$page";
    if ($page eq 'index') {
	$pretty_name = '';
    } elsif ($page eq 'lists') {
	$pretty_name = 'Mailing Lists';
    }

    my $menu = "<div class='list-group'>";
    my $found_entry = 0;
    for (@menu) {
	my ($link, $desc) = @{$_};
	my $class = 'list-group-item';
	if ($link eq $page || "$link/index" eq $page) {
	    $class .= ' active';
	    ++$found_entry;
	}
	if ($link eq "index") {
	    $link = '/';
	} elsif (-d $link) {
	    $link = "/$link/";
	} else {
	    $link = "/$link.html";
	}
	$menu .= '<a class="'.$class.'" href="'.$link.'">'.$desc.'</a>';
    }
    $menu .= <<'__END__';
<a class="list-group-item" href="https://github.com/snowballstem">Source on github</a><br>
</div>

<!--
<form NAME=P METHOD=GET ACTION="omega.cgi" TARGET="_top">
<center>
<input NAME=P VALUE="" SIZE=12>
<input TYPE=SUBMIT VALUE="Search" BORDER=0>
<input TYPE=hidden NAME=DB VALUE="snowball-website">
<input TYPE=hidden NAME=FMT VALUE="snquery">
</form>
<br>
-->

__END__
    # FIXME: Sort out sub-level navigation.
    if ($found_entry > 1) {
	print "$in: error: $found_entry menu entries highlighted\n";
	$menu = '';
    } elsif ($found_entry == 0) {
	print "$in: warning: No corresponding menu entry\n";
	$menu = '';
    }

    # $default title is the title of the page if one isn't explicitly specified.
    my $default_title;
    if ($pretty_name eq "") {
	$pretty_name = "Snowball";
    } else {
	$default_title = $pretty_name;
    }
    # Header of the page, including the menu.
    # This should be output first.
    $$vars{header} = sub {
	my $title = shift // $default_title;
	my $heading = $title;
	if (defined $title) {
	    $title .= ' - Snowball';
	} else {
	    $heading = $title = 'Snowball';
	}
	$title =~ s/\&/\&amp;/g;
	$title =~ s/</\&lt;/g;
	$title =~ s/>/\&gt;/g;
	return <<__END__;
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">
    <link rel="icon" href="/favicon.ico">
    <title>$title</title>
    <link href="https://cdn.jsdelivr.net/bootstrap/3.3.5/css/bootstrap.min.css" rel="stylesheet">
    <link href="/styles.css" rel="stylesheet">
    <!--[if lt IE 9]>
      <script src="https://cdn.jsdelivr.net/html5shiv/3.7.3/html5shiv.min.js"></script>
      <script src="https://cdn.jsdelivr.net/respond/1.4.2/respond.min.js"></script>
    <![endif]-->
  </head>

  <body>

    <!-- Static navbar -->
    <nav class="navbar navbar-default navbar-static-top">
      <div class="container">
        <div class="navbar-header">
          <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#navbar" aria-expanded="false" aria-controls="navbar">
            <span class="sr-only">Toggle navigation</span>
            <span class="icon-bar"></span>
            <span class="icon-bar"></span>
            <span class="icon-bar"></span>
          </button>
          <a href="/" class="pull-left"><img src="/snub-dodecahedron.gif" style="margin: 4px; height: 42px;"></a>
          <a class="navbar-brand" href="/">Snowball</a>
        </div>
        <div id="navbar" class="navbar-collapse collapse">
          <ul class="nav navbar-nav">
            <li><a href="/">Home</a></li>
            <li><a href="/credits.html">Credits</a></li>
            <li><a href="https://github.com/snowballstem">Source</a></li>
          </ul>
        </div><!--/.nav-collapse -->
      </div>
    </nav>

    <div class="container">
      <div class="row">
        <div class="col-md-2">
          $menu
        </div>
        <div class="col-md-10">
          <h1>$heading</h1>

__END__
    };
    $template->process($in, $vars, $out) || die $template->error();
}
for my $in (<*.gv */*.gv */*.gv>) {
    ((my $base = $in) =~ s/\.gv$//) or next;
    my $out = "$outpath$base.png";
    run ['neato', '-Tpng', $in], \undef, '>', $out, '2>', \*STDERR;
}
